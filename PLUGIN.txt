Sylpheed Plugin Specification
=============================

The following is the architecture of plugin system of Sylpheed.

 +----------+    +----------------------+     +-----------+
 | Sylpheed |----| libsylpheed-plugin-0 |--+--| Plug-in A |
 +----------+    +----------------------+  |  +-----------+
   Sylpheed         Plug-in interface      |   Plug-in DLL
                    library             +--+
        |        +------------+         |  |  +-----------+
        +--------| libsylph-0 |---------+  +--| Plug-in B |
                 +------------+               +-----------+
                 LibSylph mail library

Sylpheed loads the plug-in DLLs installed in the plug-in directory on
startup.

Plug-in can only access the functions of Sylpheed through the APIs provided
with libsylpheed-plugin-0 and libsylph-0 library.

There are two kinds of plug-in API. One is called directly from plug-ins,
another one utilizes the signal mechanism of GObject and calls the callback
functions on specific events.

The plug-in system is implemented in libsylph/sylmain.[ch] and
src/plugin.[ch].

Plug-in API
===========

Used by Sylpheed
----------------

-------------------------------------------------------------------------
void syl_plugin_signal_connect  (const gchar *name, GCallback callback,
                                 gpointer data);

-------------------------------------------------------------------------
void syl_plugin_signal_disconnect(gpointer func, gpointer data);

-------------------------------------------------------------------------
void syl_plugin_signal_emit(const gchar *name, ...);

-------------------------------------------------------------------------
gint syl_plugin_init_lib        (void);

-------------------------------------------------------------------------
gint syl_plugin_load            (const gchar *file);

-------------------------------------------------------------------------
gint syl_plugin_load_all        (const gchar *dir);

-------------------------------------------------------------------------
void syl_plugin_unload_all      (void);

-------------------------------------------------------------------------
GSList *syl_plugin_get_module_list      (void);

-------------------------------------------------------------------------
SylPluginInfo *syl_plugin_get_info      (GModule *module);

-------------------------------------------------------------------------
gboolean syl_plugin_check_version       (GModule *module);

-------------------------------------------------------------------------
gint syl_plugin_add_symbol              (const gchar *name, gpointer sym);

-------------------------------------------------------------------------
gpointer syl_plugin_lookup_symbol       (const gchar *name);

-------------------------------------------------------------------------


Functions which must be implemented by plug-ins
-----------------------------------------------

-------------------------------------------------------------------------
void plugin_load(void)

-------------------------------------------------------------------------
void plugin_unload(void)

-------------------------------------------------------------------------
SylPluginInfo *plugin_info(void)

-------------------------------------------------------------------------
gint plugin_interface_version(void)

-------------------------------------------------------------------------


Functions used by plug-ins
--------------------------

Refer to plugin.h for the functions list.


Signals list
------------

* libsylpheed-plugin-0

Call syl_plugin_signal_connect() to use the following signals.

Example:
  syl_plugin_signal_connect("plugin-load", G_CALLBACK(plugin_load_cb), data);

-------------------------------------------------------------------------
void (* plugin_load)    (GObject *obj, GModule *module);

-------------------------------------------------------------------------
void (* plugin_unload)  (GObject *obj, GModule *module);

-------------------------------------------------------------------------
void (* folderview_menu_popup)  (GObject *obj, gpointer ifactory);

-------------------------------------------------------------------------

* libsylph-0

The following signals can be used by passing GObject obtained by
syl_app_get() to the first argument of g_signal_connect().

Example:

void init_done_cb(GObject *obj, gpointer data)
{
    ...
}

    g_signal_connect(syl_app_get(), "init-done", G_CALLBACK(init_done_cb),
                     data);

-------------------------------------------------------------------------
void (* init_done) (GObject *obj)

-------------------------------------------------------------------------
void (* app_exit) (GObject *obj)

-------------------------------------------------------------------------
void (* add_msg) (GObject *obj, FolderItem *item, const gchar *file, guint num)

-------------------------------------------------------------------------
void (* remove_msg) (GObject *obj, FolderItem *item, const gchar *file,
                     guint num)

-------------------------------------------------------------------------
void (* remove_all_msg) (GObject *obj, FolderItem *item)

-------------------------------------------------------------------------
void (* remove_folder) (GObject *obj, FolderItem *item)

-------------------------------------------------------------------------
void (* move_folder) (GObject *obj, FolderItem *item, const gchar *old_id,
                      const gchar *new_id)

-------------------------------------------------------------------------
void (* folderlist_updated) (GObject *obj)

-------------------------------------------------------------------------


Sample plug-in
==============

There is a sample plug-in at plugin/test. This plug-in will not be installed
with 'make install'. It is required to enter the directory plugin/test and
run 'make install-plugin'.

The 'test' plug-in has the basic structure of Sylpheed plug-in and the
following process:

- Output string "test plug-in loaded!" to stdout on load
- Get folder list and output to stdout
- Get Sylpheed version string and output to stdout
- Get the main window and put it in front
- Add 'Plugin test' menu item on the 'Tools' menu
- When 'Plugin test' menu is selected, a window with a button named
  'Click this to quit' is displayed. If it is clicked, Sylpheed will quit


About license
=============

It is required that a plug-in DLL dynamically loaded by Sylpheed is GPL or
GPL-compatible license (ex. modified BSD license) based on the GPL clause
because the license of Sylpheed itself is GPL.

If you want to apply non-GPL license like proprietary license to your plug-in,
you must make the module an independent executable file, and make it work with
inter-process communication with a DLL.
